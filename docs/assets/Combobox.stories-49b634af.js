import{j as i}from"./jsx-runtime-47c18db8.js";import{F as l}from"./index-90eba6b7.js";import{r as b}from"./index-d806aa85.js";import"./index-35a52d1c.js";import"./getTheme-624682de.js";import"./index-d16835b1.js";import"./useSize-ee7d4598.js";import"./AntdIcon-b5d0c52f.js";import"./index-be6f683c.js";import"./roundedArrow-b20e57e4.js";import"./UnstableContext-a2e933a8.js";import"./button-1608bba2.js";import"./useMergedState-1b150724.js";import"./motion-58c6f938.js";import"./useCSSVarCls-b4f81dac.js";import"./pickAttrs-551e8cfe.js";import"./index-4d53fe87.js";import"./index-6b56abf2.js";import"./context-f33dc823.js";import"./index-0fbbfa15.js";import"./index-e72c950e.js";import"./index-8298a7d1.js";import"./ArrowRightIcon-2d46fdf7.js";import"./KeyCode-6413d982.js";import"./ToastContext-513fc3b6.js";import"./index-bf6eddb1.js";import"./index-fcfadd25.js";import"./index-46a4f406.js";import"./index-bf2c6ecf.js";import"./index-b3be51e8.js";import"./index-41f280b7.js";import"./index-b7f7c535.js";import"./index-db014707.js";import"./index-873f32b7.js";import"./index-a2d3ddff.js";import"./index-29f02deb.js";import"./index-63636042.js";import"./index-bda617e8.js";import"./index-d60e7f1a.js";import"./index-a4689621.js";import"./index-1c88f37d.js";import"./index-1609c7a8.js";import"./collapse-8e27e3c5.js";import"./index-f3c16a99.js";import"./index-1c257da6.js";import"./index-70c9a0e9.js";import"./index-ea9f1f0b.js";import"./index-1120f323.js";import"./FISSorter-dda77e13.js";import"./index-787d65f1.js";import"./index-55d04594.js";import"./index-41ba0d9f.js";const s=[{label:"Tùy chọn 1",value:"option1"},{label:"Tùy chọn 2",value:"option2"},{label:"Tùy chọn 3",value:"option3"},{label:"Tùy chọn 4",value:"option4",disabled:!0},{label:"Tùy chọn có mô tả 1",value:"option5",description:"Đây là mô tả chi tiết về tùy chọn này"},{label:"Tùy chọn có mô tả 2",value:"option6",description:"Đây là mô tả chi tiết về tùy chọn này"},{label:"Tùy chọn có mô tả 3",value:"option7",description:"Đây là mô tả chi tiết về tùy chọn này"}],gt={title:"Components/Combobox",component:l,tags:["autodocs"],argTypes:{placeholder:{control:"text",description:"Văn bản gợi ý hiển thị khi không có giá trị nào được chọn"},disabled:{control:"boolean",description:"Vô hiệu hóa component, người dùng không thể tương tác"},negative:{control:"boolean",description:"Hiển thị trạng thái lỗi với viền đỏ"},positive:{control:"boolean",description:"Hiển thị trạng thái thành công với viền xanh"},message:{control:"text",description:"Thông báo gợi ý hoặc lỗi hiển thị bên dưới component"},textLabel:{control:"text",description:"Nhãn văn bản hiển thị phía trên component"},iconLabel:{control:"select",options:["none","info"],description:"Biểu tượng hiển thị bên cạnh nhãn"},required:{control:"boolean",description:"Hiển thị dấu sao (*) cho biết trường bắt buộc"},multi:{control:"boolean",description:"Cho phép chọn nhiều tùy chọn cùng lúc"},options:{control:"object",description:"Mảng các tùy chọn cho combobox"},value:{control:"text",description:"Giá trị đã chọn (chuỗi cho chọn đơn, mảng cho đa chọn)"}},args:{options:s,placeholder:"Chọn một tùy chọn",textLabel:"Combobox",required:!1,disabled:!1,negative:!1,positive:!1,value:""}},g=e=>{const[n,r]=b.useState("");return i.jsx("div",{style:{width:300},children:i.jsx(l,{...e,multi:!1,value:n,options:s,displayValue:p=>p.label,onChange:r})})},v=e=>{const[n,r]=b.useState([]);return i.jsx("div",{style:{width:300},children:i.jsx(l,{...e,multi:!0,value:n,style:{width:300},displayValue:p=>`${p.length} option selected`,options:s,onChange:r})})},t=g.bind({}),o=v.bind({});var a,c,m;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`args => {
  const [value, setValue] = useState<string>("");
  return <div style={{
    width: 300
  }}>
      <FISCombobox {...args} multi={false} value={value} options={sampleOptions} displayValue={option => option.label} onChange={setValue} />
    </div>;
}`,...(m=(c=t.parameters)==null?void 0:c.docs)==null?void 0:m.source}}};var h,u,d;o.parameters={...o.parameters,docs:{...(h=o.parameters)==null?void 0:h.docs,source:{originalSource:`args => {
  const [value, setValue] = useState<string[]>([]);
  return <div style={{
    width: 300
  }}>
      <FISCombobox {...args} multi={true} value={value} style={{
      width: 300
    }} displayValue={options => \`\${options.length} option selected\`} options={sampleOptions} onChange={setValue} />
    </div>;
}`,...(d=(u=o.parameters)==null?void 0:u.docs)==null?void 0:d.source}}};const vt=["Default","DefaultMulti"];export{t as Default,o as DefaultMulti,vt as __namedExportsOrder,gt as default};
